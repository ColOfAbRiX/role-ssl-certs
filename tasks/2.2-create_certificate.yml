---

- name: "Extract Certificate Data : {{ entity.name }}"
  set_fact:
    certificate:         "{{ entity.certificate | default(omit) }}"

- name: "Build Certificate Paths : {{ entity.name }}"
  set_fact:
    csr_file:            "{{ entity.csr_base | default(ssl_csr_base.path) }}/{{ entity.name }}.csr"
    cert_file:           "{{ entity.crt_base | default(ssl_certs_base.path) }}/{{ entity.name }}.crt"
    local_cert_file:     "{{ entity.store_crt_base | default(ssl_store_certs_base) }}/{{ entity.name }}.crt"

- name: "Discover Generating Entity : {{ entity.name }}"
  set_fact:
    generating_entity:   "{{ (ssl_sequence | selectattr('name', 'equalto', certificate.generating_key | default(entity.name))) | list | first }}"

- name: "Generating Key Facts and Certificate Options : {{ entity.name }}"
  set_fact:
    generating_key_file: "{{ generating_entity.base_path | default(ssl_keys_base.path) }}/{{ generating_entity.name }}.key"
    generating_key_has_pass: "{{ generating_entity.key.encryption | default('') != '' }}"
    generating_key_pass: "{% if generating_entity.key.encryption | default('') != '' %}{{ generating_entity.key.passphrase }}{% endif %}"
    force_remote:        "{{ certificate.force_remote | default(entity.force_remote | default(False)) | bool }}"
    force_create:        "{{ certificate.force_create | default(entity.force_create | default(False)) | bool }}"

- name: "Set OpenSSL Configuration File : {{ entity.name }}"
  vars:
    cert_subj_country:   "{{ certificate.country | default(ssl_country) }}"
    cert_subj_email:     "{{ certificate.email | default(ssl_email) }}"
    cert_subj_location:  "{{ certificate.location | default(ssl_location) }}"
    cert_subj_org:       "{{ certificate.organization | default(ssl_organization) }}"
    cert_subj_org_unit:  "{{ certificate.organizational_unit | default(ssl_organizational_unit) }}"
    cert_subj_state:     "{{ certificate.state | default(ssl_state) }}"
  template:
    src:    tmp/openssl.cnf.j2
    dest:   /tmp/openssl.cnf
    mode:   '0644'
  changed_when: false

- name: "Copy Local Certificate to Target: {{ entity.name }}"
  copy:
    src:  "{{ local_cert_file }}"
    dest: "{{ cert_file }}"
  when: not force_remote
  register: certificate_copied_from_local
  ignore_errors: yes

- name: "Force Creation of the Certificate : {{ entity.name }}"
  file:
    path: "{{ item }}"
    state: absent
  when: force_create
  with_items:
   - "{{ csr_file }}"
   - "{{ cert_file }}"


## Self Signed Certificate ##

- name: "Generate Self Signed Certificate : {{ entity.name }}"
  shell: |
    openssl req \
      -config /tmp/openssl.cnf \
      -new \
      -x509 \
      {% if generating_key_has_pass %}-passin env:openssl_passphrase{% endif %}\
      -{{ certificate.digest | default('sha256') }} \
      -key {{ generating_key_file }} \
      -days {{ certificate.days | default(30) }} \
      -out "{{ cert_file }}"
  args:
    creates: "{{ cert_file }}"
  environment:
    openssl_passphrase: "{{ generating_key_pass }}"
  register: ss_certificate_creation
  when: certificate.self_signed | default(False) | bool

## Full Certificate ##

# The CSR is create regardless of having a signing key to allow for manual
# processing
- name: "Generate Certificate Signing Request : {{ entity.name }}"
  shell: |
    openssl req \
      -config /tmp/openssl.cnf \
      -new \
      {% if generating_key_has_pass %}-passin env:openssl_passphrase{% endif %}\
      -key {{ generating_key_file }} \
      -out "{{ csr_file }}"
  args:
    creates: "{{ cert_file }}"
  environment:
    openssl_passphrase: "{{ generating_key_pass }}"
  when: not certificate.self_signed | default(False) | bool

# This block is executed only if we want to complete the creation of the
# certificate with a key we already have
- block:

   - name: "Discover Signing Entity : {{ entity.name }}"
     set_fact:
       signing_entity:   "{{ (ssl_sequence | selectattr('name', 'equalto', certificate.signing_key)) | list | first }}"

   - name: "Signing Key Facts : {{ entity.name }}"
     set_fact:
       signing_key_file: "{{ signing_entity.base_path | default(ssl_keys_base.path) }}/{{ signing_entity.name }}.key"
       signing_crt_file: "{{ signing_entity.crt_base | default(ssl_certs_base.path) }}/{{ signing_entity.name }}.crt"
       signing_key_has_pass: "{{ signing_entity.key.encryption | default('') != '' }}"
       signing_key_pass: "{% if signing_entity.key.encryption | default('') != '' %}{{ signing_entity.key.passphrase }}{% endif %}"

   - name: "Sign CSR and Generate Certificate : {{ entity.name }}"
     shell: |
       openssl x509 \
         -req \
         -extfile /tmp/openssl.cnf \
         -extensions req-req_extensions \
         -{{ certificate.digest | default('sha256') }} \
         -days {{ certificate.days | default(30) }} \
         -in "{{ csr_file }}" \
         -CAkey "{{ signing_key_file }}" \
         -CA "{{ signing_crt_file }}" \
         -CAcreateserial \
         {% if signing_key_has_pass %}-passin env:openssl_passphrase{% endif %}\
         -out "{{ cert_file }}"
     args:
       creates: "{{ cert_file }}"
     environment:
       openssl_passphrase: "{{ signing_key_pass }}"
     register: certificate_creation

  when: not certificate.self_signed | default(False) | bool and
        certificate.signing_key | default('') != ''


- name: "Certificate File Permissions : {{ entity.name }}"
  file:
    path:   "{{ cert_file }}"
    owner:  "{{ certificate.owner | default(omit) }}"
    group:  "{{ certificate.group | default(omit) }}"
    mode:   "{{ certificate.mode | default('0644') }}"
    seuser: "{{ certificate.seuser | default(omit) }}"
    serole: "{{ certificate.serole | default(omit) }}"
    setype: "{{ certificate.setype | default(omit) }}"

- name: "Trust Certificate : {{ entity.name }}"
  include: "3-trust.yml"
  vars:
    trust_file: "{{ cert_file }}"
  when: certificate.trust | default(False) | bool

# If the certificate has been copied from locally, then this will have no effect
- name: "Download Certificate from Target : {{ entity.name }}"
  fetch:
    src:  "{{ cert_file }}"
    dest: "{{ local_cert_file }}"
    flat: yes
  when: certificate.fetch | default(True) | bool and (
          certificate_copied_from_local | failed or
          certificate_creation | changed or
          ss_certificate_creation | changed
        )
