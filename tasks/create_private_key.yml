---

- name: "set_fact : create_private_key.yml : {{ entity.name }}"
  set_fact:
    key_has_pass: "{{ private_key.encryption | default('') != '' }}"
    key_pass:     "{% if private_key.encryption | default('') != '' %}{{ private_key.passphrase }}{% endif %}"
    force_remote: "{{ private_key.force_remote | default(entity.force_remote | default(False)) | bool }}"
    force_create: "{{ private_key.force_create | default(entity.force_create | default(False)) | bool }}"

- name: "Copy Local Key to Target : {{ entity.name }}"
  copy:
    src:  "{{ local_key_file }}"
    dest: "{{ key_file }}"
  when: not force_remote
  register: private_key_copied_from_local
  ignore_errors: yes

- name: "Force Creation of the Key : {{ entity.name }}"
  file: path="{{ key_file }}" state=absent
  when: force_create


- block:

   - name: "Generate DSA Key : {{ entity.name }}"
     shell: |
       openssl dsaparam \
         -noout \
         -out "{{ key_file }}" \
         -genkey \
         {{ private_key.bits }}
     args:
       creates: "{{ key_file }}"
     register: private_key_dsa_creation

   - name: "Add Passphrase to DSA Key : {{ entity.name }}"
     shell: |
       openssl dsa \
         -{{ private_key.encryption }} \
         -passout env:openssl_passphrase \
         -in "{{ key_file }}" \
         -out "{{ key_file }}"
     environment:
       openssl_passphrase: "{{ key_pass }}"
     when: private_key_dsa_creation | changed and
           key_has_pass

  when: private_key.type | default('rsa') == 'dsa'

- name: "Generate RSA Key : {{ entity.name }}"
  shell: |
    openssl genrsa \
      {% if key_has_pass %}-{{ private_key.encryption }} \
      -passout env:openssl_passphrase{% endif %}
      -out "{{ key_file }}" \
      {{ private_key.bits }}
  args:
    creates: "{{ key_file }}"
  environment:
    openssl_passphrase: "{{ key_pass }}"
  register: private_key_rsa_creation
  when: private_key.type | default('rsa') == 'rsa'

- block:

   - name: "Generate ECDSA Key : {{ entity.name }}"
     shell: |
       openssl ecparam \
         -noout \
         -name "{{ private_key.ec_curve }}" \
         -genkey \
         -out "{{ key_file }}"
     args:
       creates: "{{ key_file }}"
     register: private_key_ecdsa_creation

   - name: "Add Passphrase to ECDSA Key : {{ entity.name }}"
     shell: |
       openssl ec \
         -{{ private_key.encryption }} \
         -passout env:openssl_passphrase \
         -in "{{ key_file }}" \
         -out "{{ key_file }}"
     environment:
       openssl_passphrase: "{{ key_pass }}"
     when: private_key_ecdsa_creation | changed and
           key_has_pass

  when: private_key.type | default('rsa') == 'ecdsa'

- name: "Key File Permissions : {{ entity.name }}"
  file:
    path:   "{{ key_file }}"
    owner:  "{{ private_key.owner | default(omit) }}"
    group:  "{{ private_key.group | default(omit) }}"
    mode:   "{{ private_key.mode | default('0400') }}"
    seuser: "{{ private_key.seuser | default(omit) }}"
    serole: "{{ private_key.serole | default(omit) }}"
    setype: "{{ private_key.setype | default(omit) }}"

# If the key has been copied from locally, then this will have no effect
- name: "Download Key from Target : {{ entity.name }}"
  fetch:
    src:  "{{ key_file }}"
    dest: "{{ local_key_file }}"
    flat: yes
  when: private_key.fetch | default(True) | bool and (
          private_key_copied_from_local | failed or
          private_key_rsa_creation | changed or
          private_key_dsa_creation | changed or
          private_key_ecdsa_creation | changed
        )
