---

- name: "Copy Local Key : {{ entity.name }}"
  copy:
    src:  "{{ local_key_file }}"
    dest: "{{ key_file }}"
  when: not entity.force_remote | default(False) | bool
  ignore_errors: yes

- name: "Force Creation of the Key : {{ entity.name }}"
  file: path="{{ key_file }}" state=absent
  when: entity.force_create | default(False) | bool


- name: "Generate DSA Key : {{ entity.name }}"
  command: openssl dsaparam -noout -out "{{ key_file }}" -genkey {{ private_key.bits }}
  args:
    creates: "{{ key_file }}"
  register: private_key_dsa_creation
  when: private_key.type | default('rsa') == 'dsa'

- name: "Generate RSA Key : {{ entity.name }}"
  command: openssl genrsa -out "{{ key_file }}" {{ private_key.bits }}
  args:
    creates: "{{ key_file }}"
  register: private_key_rsa_creation
  when: private_key.type | default('rsa') == 'rsa'

- name: "Generate ECDSA Key : {{ entity.name }}"
  command: openssl ecparam -noout -name "{{ private_key.ec_curve }}" -genkey -param_enc explicit -out "{{ key_file }}"
  args:
    creates: "{{ key_file }}"
  register: private_key_ecdsa_creation
  when: private_key.type | default('rsa') == 'ecdsa'


- name: "Key File Permissions : {{ entity.name }}"
  file:
    path:   "{{ key_file }}"
    owner:  "{{ private_key.owner | default(omit) }}"
    group:  "{{ private_key.group | default(omit) }}"
    mode:   "{{ private_key.mode | default('0400') }}"
    seuser: "{{ private_key.seuser | default(omit) }}"
    serole: "{{ private_key.serole | default(omit) }}"
    setype: "{{ private_key.setype | default(omit) }}"

# If the key has been copied from locally, then this will have no effect
- name: "Download Key : {{ entity.name }}"
  fetch:
    src:  "{{ key_file }}"
    dest: "{{ local_key_file }}"
    flat: yes
  when: private_key.fetch | default(True) | bool and (
        private_key_rsa_creation | changed or
        private_key_dsa_creation | changed or
        private_key_ecdsa_creation | changed )
