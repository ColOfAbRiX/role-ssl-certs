---
# defaults file for ssl-certs

# Path on the Ansible server where to store certificate (this path is relative
# to the running playbook)
ssl_store_base: ../file_store/ssl_certificates

# Default working path on the target machine. This is where the keys,
# certificates and chains will be created. It supports the fields of the ansible
# "file" module: owner, group, mode, ...
ssl_base:
  path: /tmp/ssl_certs

# Subdirectories to store the different the objects relative to "ssl_base". They
# can also be uniform and refer to the same directory. They will also be used to
# place the files inside the local "ssl_store_base". Each variable support all
# the fields of the ansible "file" module: owner, group, mode, ...
ssl_key_dir:
  name: key
  mode: '0700'
ssl_csr_dir:
  name: csr
  mode: '0750'
ssl_crt_dir:
  name: crt
  mode: '0755'
ssl_chain_dir:
  name: crt
  mode: '0755'

# Default OpenSSL values
ssl_country:      GB
ssl_state:        London
ssl_location:     London
ssl_organization: Example Company
ssl_email:        admin@example.com
ssl_organizational_unit: IT Operations

# Main SSL Sequence. Objects will be created following this sequence, one after
# the other.
ssl_sequence: []
# #
# # The following is a working example of how to setup a Root CA (root_ca), a
# # certificate (website) and a certificate chain (website_chain) with the two
# # certificates.
# # Each entry shows how to use different parameters and options.
# # Most of these options are derived directly from OpenSSL so that it's highly
# # encouraged to check the manual pages of OpenSSL for a full description of
# # the fields and options.
# #
# # Root CA
# - name:          root_ca
#   # Custom paths that override the default working path for this key only.
#   # If using custom paths, they must exist beforehand.
#   key_base:      /tmp/ssl_certs/key
#   csr_base:      /tmp/ssl_certs/csr
#   crt_base:      /tmp/ssl_certs/crt
#   # Also the path of where to store the files locally can be customized.
#   store_key_base: /tmp/ssl_certs/key
#   store_csr_base: /tmp/ssl_certs/csr
#   store_crt_base: /tmp/ssl_certs/crt
#   # Definition of the private key (more options shown below too)
#   key:
#     # Crypto system: rsa, dsa, ecdsa
#     type:                ecdsa
#     # If using ECDSA, this is the name of the elliptic curve. The name can be
#     # found using: openssl ecparam -list_curves
#     ec_curve:            prime256v1
#     # If set to a cipher it encrypts the key. See openssl for the list of
#     # supported algorithms.
#     encryption:          aes256
#     # The passphrase to use to encrypt the key
#     passphrase:          Passw0rd
#   # Definition of the certificate (more options shown below too)
#   certificate:
#     # This indicates that the certificate is to be self-signed. If both this
#     # option and the "signing_key" option are missing then only the CSR
#     # is generated.
#     self_signed:         yes
#     common_name:         My website root Certificate Authority
#     organizational_unit: Example Security Office
#     # Days of validity. Default is 30
#     days:                1000
#     # Installs the certificate on the system trust store
#     trust:               yes
#     # SSL v3 extensions. Default is to omit these values
#     authorityKeyIdentifier: 'keyid:always,issuer:always'
#     basicConstraints:    'critical,CA:TRUE,pathlen:0'
#     keyUsage:            'critical,cRLSign,digitalSignature,keyCertSign'
#     subjectKeyIdentifier: 'hash'
#
# # Website signed certificate
# - name:          website
#   # It forces the creation of a new key and certificate on the machine
#   force_create:  yes
#   # It gives priority to the key that is stored remotely versus the one stored
#   # on the local repository (it will overwrite the local one if it's already
#   # present remotely)
#   force_remote:  yes
#   # If set to false, no operation will be performed
#   enabled:       yes
#   # Definition of the private key
#   key:
#     # Crypto system: rsa, dsa, ecdsa
#     type:                rsa
#     # Length of they key, applies to RSA and DSA key types
#     bits:                2048
#     # File modifiers, as per usual "file" Ansible module
#     #owner:               nginx
#     #group:               nginx
#     # If set to no the file will not be stored locally
#     fetch:               no
#     # Both force_create and force_remote can be specified also at "key",
#     # "certificate" and "chain" level to override the entity ones
#     force_create: no
#   # Definition of the certificate
#   certificate:
#     common_name:         "{{ ansible_fqdn }}"
#     # For alternative DNS names
#     alt_names_dns:       [ internal.example.com ]
#     # For alternative IP addresses
#     #alt_names_ips:       [ "{{ ansible_default_ipv4.address }}" ]
#     # Reference the name of the signing CA certificate. If both this option
#     # and the "signing_key" option are missing then only the CSR is generated.
#     signing_key:         root_ca
#     # Digest algorithm, defaults to sha256
#     digest:              sha1
#     #owner:               nginx
#     #group:               nginx
#     # SSL v3 extensions. Default is to omit these values
#     basicConstraints:    'CA:FALSE'
#     subjectKeyIdentifier: 'hash'
#     keyUsage:            'nonRepudiation,digitalSignature,keyEncipherment'
#     extendedKeyUsage:    'clientAuth'
#     # If set to no the file will not be stored locally
#     fetch:               no
#
# # Reuse a private key to generate a new certificate
# - name:          website_self_signed
#   # In this example the certificate is created using a previous private key
#   # (of the "website" entity) and self-signing the it. This feature can also
#   # be used to create cross-signed certificates.
#   certificate:
#     generating_key:      website
#     self_signed:         yes
#     common_name:         "{{ ansible_fqdn }}"
#     alt_names_dns:       [ internal.example.com ]
#     digest:              sha1
#     #owner:               nginx
#     #group:               nginx
#     basicConstraints:    'CA:FALSE'
#     subjectKeyIdentifier: 'hash'
#     keyUsage:            'nonRepudiation,digitalSignature,keyEncipherment'
#     extendedKeyUsage:    'clientAuth'
#
# # Create only the CSR
# - name:          website_manual_sign
#   # Here both "signing_key" and "self_signed" are missing. This stops the role
#   # at the CSR only so that it can be manually signed. This, of course, is a
#   # two steps process and when you have the certificate it must be added back
#   # for the role to install it.
#   certificate:
#     generating_key:      website
#     self_signed:         yes
#     common_name:         "{{ ansible_fqdn }}"
#     alt_names_dns:       [ internal.example.com ]
#     digest:              sha1
#     #owner:               nginx
#     #group:               nginx
#     basicConstraints:    'CA:FALSE'
#     subjectKeyIdentifier: 'hash'
#     keyUsage:            'nonRepudiation,digitalSignature,keyEncipherment'
#     extendedKeyUsage:    'clientAuth'
#
# # Create a certificate chain
# - name:          website_chain
#   # This is a postfix applied to the name of the entity to create the file
#   # name of the chain.
#   chain_postfix:       '-list'
#   # Definition the chain as list of certificates. Here it's shown on a separate
#   # entity but it can be part of any entity with "key" and "certificates"
#   # attributes. Chain files will end in -chain.crt
#   chain:
#     # File modifiers, as per usual "file" Ansible module
#     #owner:               nginx
#     #group:               nginx
#     # If set to no the file will not be stored locally
#     fetch:               yes
#     # Installs the certificate on the system trust store
#     trust:               yes
#     # List of the certificate names that form the chain. The names are the
#     # names used in the above certificates. The output chain will contain the
#     # certificates in the order that they appear here. The order on which the
#     # certificates appear is important as stated in RFC4346 Section 7.4.2
#     # If set to yes the file will be stored locally
#     fetch:               yes
#     certificates:
#      - website
#      - root_ca
#      - website_self_signed
#
# # Example of a client certificate, created in one entity, with a chain file.
# - name:          client_certificate
#   key:
#     type:                rsa
#     bits:                4096
#   certificate:
#     days:                730
#     common_name:         John Smith <johnsmith@example.com>
#     # Certificate details can be changed here. Valid keys mimic the ssl_*
#     # equivalents of the upper level variables.
#     email:               johnsmith@example.com
#     country:             GI
#     state:               Gibraltar
#     location:            Gibraltar
#     signing_key:         root_ca
#     digest:              sha256
#     # We restrict the key usage for a specific purpose
#     keyUsage:            nonRepudiation,digitalSignature,keyEncipherment
#     basicConstraints:    'CA:FALSE'
#     extendedKeyUsage:    clientAuth
#     subjectKeyIdentifier: hash
#   chain:
#     # Force the update of the chain
#     force_create: yes
#     # A chain can be included together with a Key and Certificate. The chain
#     # will be named appending -chain.crt to the file.
#     certificates:
#      - client_certificate
#      - root_ca
#